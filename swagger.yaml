openapi: 3.0.0
info:
  title: Connect Api Doc
  version: '1.0'
  description: >
    This is the  Connnect NCC Api Documentation. This documents the api's
    provided by cas which is part of the New Connect Cluster Project.


    # Introduction

    This API is documented in **OpenAPI format**


    # Cross-Origin Resource Sharing

    This API features Cross-Origin Resource Sharing (CORS) implemented in
    compliance with  [W3C spec](https://www.w3.org/TR/cors/).

    And that allows cross-domain communication from the browser.

    All responses have a wildcard same-origin which makes them completely public
    and accessible to everyone, including any code on any site.


    # Authentication Mechanisms


    NCC API offers  authentication in the form of :
      - OAuth2 - An open protocol to allow secure authorization in a simple and standard method from web, mobile and desktop applications.
      - Bearer auth - The oAuth token should be supplied as a bearer token in the Authorization Header

    # Reference Docs


    - [Adobe Rest Api
    Guidelines](https://git.corp.adobe.com/pages/experience-platform/api-guidelines/)

    - [Open Api Spec
    3.1.0](https://github.com/OAI/OpenAPI-Specification/blob/main/versions/3.1.0.md)

    - [Json HAL](https://datatracker.ietf.org/doc/html/draft-kelly-json-hal)

    - [oAuth grant](https://datatracker.ietf.org/doc/html/rfc6749) & [oAuth
    revoke](https://datatracker.ietf.org/doc/html/rfc7009)

    - [Problem detail](https://datatracker.ietf.org/doc/html/rfc7807)

    - [Json Patch](https://www.rfc-editor.org/rfc/rfc6902)



    <SecurityDefinitions />
  contact:
    name: Connect team
    email: connect@adobe.com
    url: https://www.adobe.com
  license:
    name: Adobe Commercial license
    url: https://www.adobe.com
  x-logo:
    url: https://upload.wikimedia.org/wikipedia/commons/0/0f/Adobe_Connect_Logo.png
    altText: Adobe Connect logo
tags:
  - name: oAuth
    x-displayName: oAuth
    description: Everything about oAuth authentication
  - name: acProvision
    x-displayName: Account Provisoning
    description: Provisoning Operations on accounts
  - name: acOps
    x-displayName: Account Operations
    description: Operations on accounts
  - name: licProvision
    x-displayName: License Provisoning
    description: Operations on account license provisoning
  - name: licOps
    x-displayName: License Operations
    description: Operations on account licensse
  - name: userProvision
    x-displayName: User Provisoning
    description: Operations on users
  - name: eventProvision
    x-displayName: Event Provisoning
    description: Operations on events
  - name: spi
    x-displayName: Marketo SPI
    description: Marketo SPI
x-tagGroups:
  - name: Authentication
    tags:
      - oAuth
  - name: Partner Api
    tags:
      - acProvision
      - acOps
      - licProvision
      - licOps
      - userProvision
      - eventProvision
      - spi
paths:
  /oauth/token:
    post:
      operationId: getToken
      tags:
        - oAuth
      summary: New token
      description: |
        Currently only implicit client credentials grant is supported.
        Confidential clients only supported.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/oAuthReq'
      responses:
        '200':
          description: success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/oAuthResp'
        '400':
          $ref: '#/components/responses/400Response'
        '401':
          $ref: '#/components/responses/401Response'
  /oauth/revoke:
    post:
      operationId: revokeToken
      tags:
        - oAuth
      summary: Revoke token
      description: |
        Api to revoke token. Both credentials and token need to be passed in
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/oAuthRevokeReq'
      responses:
        '200':
          description: success
        '400':
          $ref: '#/components/responses/400Response'
        '401':
          $ref: '#/components/responses/401Response'
  /api/pi/accounts:
    post:
      summary: New account
      operationId: createAccount
      tags:
        - acProvision
      description: Provision a new connect account and returns the account id
      security:
        - BearerAuth:
            - superAdmin
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/accountObject'
      responses:
        '201':
          description: created
          headers:
            Location:
              schema:
                type: string
                description: Location of the new account provisioned
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/accountCreateResp'
        '400':
          $ref: '#/components/responses/400Response'
        '401':
          $ref: '#/components/responses/401Response'
  /api/pi/accounts/{accountId}:
    delete:
      summary: Delete account by id
      operationId: deleteAccount
      tags:
        - acProvision
      description: Delete a connect acount by id
      security:
        - BearerAuth:
            - superAdmin
      parameters:
        - in: path
          name: accountId
          schema:
            type: string
          required: true
          description: ID of the account
      responses:
        '200':
          description: success
        '400':
          $ref: '#/components/responses/400Response'
        '401':
          $ref: '#/components/responses/401Response'
  /api/pi/account:
    get:
      summary: Get account details
      operationId: getAccount
      tags:
        - acOps
      description: Get details of connect account
      security:
        - BearerAuth:
            - admin
            - user
      responses:
        '200':
          description: success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/accountGetResp'
        '400':
          $ref: '#/components/responses/400Response'
    patch:
      summary: Update account
      operationId: updateAccount
      tags:
        - acOps
      description: Update account information
      security:
        - BearerAuth:
            - admin
      requestBody:
        required: true
        content:
          application/json-patch+json:
            schema:
              $ref: '#/components/schemas/patchRequest'
      responses:
        '200':
          description: success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/accountGetResp'
        '400':
          $ref: '#/components/responses/400Response'
        '401':
          $ref: '#/components/responses/401Response'
  /api/pi/licenses:
    post:
      summary: Create account license
      operationId: createLicense
      tags:
        - licProvision
      description: Create a new license in a connect account
      security:
        - BearerAuth:
            - superAdmin
      parameters:
        - in: header
          name: X-Account-Id
          schema:
            type: string
          required: true
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/baseLicenseObject'
      responses:
        '200':
          description: success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/getLicenseObject'
        '400':
          $ref: '#/components/responses/400Response'
        '401':
          $ref: '#/components/responses/401Response'
    get:
      summary: Get account licenses
      operationId: getLicenses
      tags:
        - licOps
      description: Get licenses in connect account
      security:
        - BearerAuth:
            - superAdmin
            - admin
            - user
      parameters:
        - in: header
          name: X-Account-Id
          description: Required when using the token with super admin scope only
          schema:
            type: string
          required: false
        - in: query
          name: type
          schema:
            type: string
            default: ALL
          description: license type
        - in: query
          name: state
          schema:
            type: string
            default: ACTIVE
          description: license state type
      responses:
        '200':
          description: success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/accountLicenseGetResp'
        '400':
          $ref: '#/components/responses/400Response'
        '401':
          $ref: '#/components/responses/401Response'
  /api/pi/licenses/{licenseId}:
    get:
      summary: Get license by id
      operationId: getLicenseById
      tags:
        - licOps
      description: Get a license by id
      security:
        - BearerAuth:
            - superAdmin
            - admin
            - user
      parameters:
        - in: path
          name: licenseId
          schema:
            type: string
          required: true
          description: ID of the license
      responses:
        '200':
          description: success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/getLicenseObject'
        '400':
          $ref: '#/components/responses/400Response'
        '401':
          $ref: '#/components/responses/401Response'
        '404':
          $ref: '#/components/responses/404Response'
    patch:
      summary: Update account license by id
      operationId: updateLicenseById
      tags:
        - licProvision
      description: Update license information
      security:
        - BearerAuth:
            - superAdmin
      parameters:
        - in: path
          name: licenseId
          schema:
            type: string
          required: true
          description: ID of the license
      requestBody:
        required: true
        content:
          application/json-patch+json:
            schema:
              $ref: '#/components/schemas/patchRequest'
      responses:
        '200':
          description: success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/accountGetResp'
        '400':
          $ref: '#/components/responses/400Response'
        '401':
          $ref: '#/components/responses/401Response'
        '404':
          $ref: '#/components/responses/404Response'
    delete:
      summary: Delete account license by id
      operationId: deleteLicenseById
      tags:
        - licProvision
      description: Delete a connect acount license by id
      security:
        - BearerAuth:
            - superAdmin
      parameters:
        - in: path
          name: licenseId
          schema:
            type: string
          required: true
          description: ID of the license
      responses:
        '200':
          description: success
        '400':
          $ref: '#/components/responses/400Response'
        '401':
          $ref: '#/components/responses/401Response'
        '404':
          $ref: '#/components/responses/404Response'
  /api/pi/users:
    post:
      summary: Create new user in account
      operationId: createUser
      tags:
        - userProvision
      description: Create a new user in a connect account
      security:
        - BearerAuth:
            - admin
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/baseUserObject'
      responses:
        '200':
          description: success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/getUserObject'
        '400':
          $ref: '#/components/responses/400Response'
        '401':
          $ref: '#/components/responses/401Response'
  /api/pi/users/{userId}:
    get:
      summary: Get account user by id
      operationId: getUserById
      tags:
        - userProvision
      description: Get a user by id
      security:
        - BearerAuth:
            - admin
            - user
      parameters:
        - in: path
          name: userId
          schema:
            type: string
          required: true
          description: ID of the user
      responses:
        '200':
          description: success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/getUserObject'
        '400':
          $ref: '#/components/responses/400Response'
        '401':
          $ref: '#/components/responses/401Response'
        '404':
          $ref: '#/components/responses/404Response'
    patch:
      summary: Update user  by id
      operationId: patchUserById
      tags:
        - userProvision
      description: Update user information
      security:
        - BearerAuth:
            - admin
            - user
      parameters:
        - in: path
          name: userId
          schema:
            type: string
          required: true
          description: ID of the user
      requestBody:
        required: true
        content:
          application/json-patch+json:
            schema:
              $ref: '#/components/schemas/patchRequest'
      responses:
        '200':
          description: success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/getUserObject'
        '400':
          $ref: '#/components/responses/400Response'
        '401':
          $ref: '#/components/responses/401Response'
        '404':
          $ref: '#/components/responses/404Response'
    delete:
      summary: Delete account user by id
      operationId: deleteUserById
      tags:
        - userProvision
      description: Delete a connect acount user by id
      security:
        - BearerAuth:
            - superAdmin
      parameters:
        - in: path
          name: userId
          schema:
            type: string
          required: true
          description: ID of the user
      responses:
        '200':
          description: success
        '400':
          $ref: '#/components/responses/400Response'
        '401':
          $ref: '#/components/responses/401Response'
        '404':
          $ref: '#/components/responses/404Response'
  /api/pi/events:
    post:
      summary: Create event
      operationId: createEvent
      tags:
        - eventProvision
      description: >-
        Create a new event. The event is owned by the user creating it and he
        becomes the host by default
      security:
        - BearerAuth:
            - user
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/baseEventObject'
      responses:
        '200':
          description: success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/getEventObject'
        '400':
          $ref: '#/components/responses/400Response'
        '401':
          $ref: '#/components/responses/401Response'
    get:
      summary: Get events
      operationId: getEvents
      tags:
        - eventProvision
      description: Get events
      security:
        - BearerAuth:
            - user
      responses:
        '200':
          description: success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/getEventsResp'
        '400':
          $ref: '#/components/responses/400Response'
        '401':
          $ref: '#/components/responses/401Response'
  /api/pi/events/{eventId}:
    get:
      summary: Get event by id
      operationId: getEventById
      tags:
        - eventProvision
      description: Get a license by id
      security:
        - BearerAuth:
            - user
      parameters:
        - in: path
          name: eventId
          schema:
            type: string
          required: true
          description: ID of the event
      responses:
        '200':
          description: success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/getEventObject'
        '400':
          $ref: '#/components/responses/400Response'
        '401':
          $ref: '#/components/responses/401Response'
        '404':
          $ref: '#/components/responses/404Response'
    patch:
      summary: Update event by id
      operationId: updateEventById
      tags:
        - eventProvision
      description: Update event information
      security:
        - BearerAuth:
            - user
      parameters:
        - in: path
          name: eventId
          schema:
            type: string
          required: true
          description: ID of the eventId
      requestBody:
        required: true
        content:
          application/json-patch+json:
            schema:
              $ref: '#/components/schemas/patchRequest'
      responses:
        '200':
          description: success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/getEventObject'
        '400':
          $ref: '#/components/responses/400Response'
        '401':
          $ref: '#/components/responses/401Response'
        '404':
          $ref: '#/components/responses/404Response'
    delete:
      summary: Delete event id
      operationId: deleteEvent
      tags:
        - eventProvision
      description: Delete an event by id
      security:
        - BearerAuth:
            - user
      parameters:
        - in: path
          name: eventId
          schema:
            type: string
          required: true
          description: ID of the event
      responses:
        '200':
          description: success
        '400':
          $ref: '#/components/responses/400Response'
        '401':
          $ref: '#/components/responses/401Response'
        '404':
          $ref: '#/components/responses/404Response'
  /api/pi/events/{eventId}/presenters:
    post:
      summary: Create presenters for an event
      operationId: createPresenters
      tags:
        - eventProvision
      description: Create presenters
      security:
        - BearerAuth:
            - user
      parameters:
        - in: path
          name: eventId
          schema:
            type: string
          required: true
          description: ID of the event
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/baseUserObject'
      responses:
        '200':
          description: success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/getPresenterObject'
        '400':
          $ref: '#/components/responses/400Response'
        '401':
          $ref: '#/components/responses/401Response'
        '404':
          $ref: '#/components/responses/404Response'
    get:
      summary: Get presenters for an event
      operationId: getPresenters
      tags:
        - eventProvision
      description: Get presenters
      security:
        - BearerAuth:
            - user
      parameters:
        - in: path
          name: eventId
          schema:
            type: string
          required: true
          description: ID of the event
      responses:
        '200':
          description: success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/getPresentersObject'
        '400':
          $ref: '#/components/responses/400Response'
        '401':
          $ref: '#/components/responses/401Response'
        '404':
          $ref: '#/components/responses/404Response'
  /api/pi/events/{eventId}/presenters/{presenterId}:
    delete:
      summary: Delete presenters for an event
      operationId: delPresenters
      tags:
        - eventProvision
      description: Remove presenters
      security:
        - BearerAuth:
            - user
      parameters:
        - in: path
          name: eventId
          schema:
            type: string
          required: true
          description: ID of the event
        - in: path
          name: presenterId
          schema:
            type: string
          required: true
          description: ID of the presenter
      responses:
        '200':
          description: success
        '400':
          $ref: '#/components/responses/400Response'
        '401':
          $ref: '#/components/responses/401Response'
        '404':
          $ref: '#/components/responses/404Response'
  /api/pi/marketo/ping:
    get:
      summary: Server heartbeat operation
      description: Check to see if the endpoint is responsive.
      operationId: spiPing
      tags:
        - spi
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/PingResponse'
                  - $ref: '#/components/schemas/ErrorResponse'
        '401':
          $ref: '#/components/responses/UnauthorizedResponse'
        '403':
          $ref: '#/components/responses/ForbiddenResponse'
  /api/pi/marketo/events/{eventId}/attendees/live:
    parameters:
      - $ref: '#/components/parameters/requestId'
      - $ref: '#/components/parameters/eventId'
    get:
      summary: Get event attendees for live event
      tags:
        - spi
      operationId: spiRegn
      description: Return list of leads that attended live event.
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/AttendeesResponse'
                  - $ref: '#/components/schemas/ErrorResponse'
        '204':
          description: Results not ready yet
        '401':
          $ref: '#/components/responses/UnauthorizedResponse'
        '403':
          $ref: '#/components/responses/ForbiddenResponse'
  /api/pi/marketo/events/{eventId}/registration:
    parameters:
      - $ref: '#/components/parameters/requestId'
      - $ref: '#/components/parameters/eventId'
    post:
      summary: Register a lead for an event
      operationId: spiReporting
      tags:
        - spi
      description: >-
        Tries to register a lead for an event. Returns success or failure of 
        registration and registration id.
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Lead'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/RegistrationResponse'
                  - $ref: '#/components/schemas/ErrorResponse'
        '401':
          $ref: '#/components/responses/UnauthorizedResponse'
        '403':
          $ref: '#/components/responses/ForbiddenResponse'
components:
  securitySchemes:
    OAuth2:
      type: oauth2
      description: >
        This api uses oAuth2 with the implicit grant flow.only client
        credentials grant is supported.



        The oauth scopes are not heirarchial. Having a token with admin scope
        does not grant you permission to use the apis which have user scope
        also.
      flows:
        authorizationCode:
          authorizationUrl: /oauth/authorize
          tokenUrl: /oauth/token
          scopes:
            user: Grants account access on behalf of an user for an account
            admin: Grants account access on behalf of an admin for an account
            superAdmin: Grants super admin acess
    BearerAuth:
      type: http
      scheme: bearer
  schemas:
    oAuthBaseReq:
      type: object
      required:
        - clientId
        - clientSecret
        - scope
      properties:
        clientId:
          type: string
          description: client id of the oauth application
          example: sjhdf342jh34jh2342h3k4h22j3h423hjk4h2
        clientSecret:
          type: string
          description: client secret of the oauth application
          example: agsdkjaghsdagkjdgakjk6427342342bj3424
        scope:
          type: string
          description: scope of the requested token
          enum:
            - superAdmin
            - admin
            - user
          example: admin
    oAuthReq:
      allOf:
        - $ref: '#/components/schemas/oAuthBaseReq'
        - type: object
          description: oAuth request
          properties:
            properties:
              type: object
              required:
                - key
                - value
              properties:
                key:
                  type: string
                  description: key of the property
                  enum:
                    - account
                    - user
                  example: user
                value:
                  type: string
                  description: value of the key in the property
                  example: ghhjd739j
    oAuthResp:
      type: object
      properties:
        accessToken:
          type: string
          description: access token
          example: hasdkajsdahkdhakdhja78234n2m342j34j23j4
        tokenType:
          type: string
          description: token type
          enum:
            - bearer
          example: bearer
        expiresIn:
          type: integer
          description: token validity time in seconds
          example: 3600
        expiryTimestamp:
          type: string
          format: date-time
          description: expiry time
          example: '2022-07-11T11:54:52Z'
    problemBase:
      description: A Problem Details object (RFC 7807)
      type: object
      properties:
        type:
          type: string
          format: uri
          description: An absolute URI that identifies the problem type
          default: about:blank
          example: http://example.com
        title:
          type: string
          description: >-
            A short, summary of the problem type. Written in English and
            readable for engineers (usually not suited for non technical
            stakeholders and not localized).
          example: Service Unavailable
        status:
          type: integer
          format: int32
          description: >-
            The HTTP status code generated by the origin server for this
            occurrence of the problem.
          minimum: 400
          maximum: 600
          example: 503
        detail:
          type: string
          description: >-
            A human-readable explanation specific to this occurrence of the
            problem
          example: Some specific error occured
        instance:
          type: string
          format: uri
          description: >-
            An absolute URI that identifies the specific occurrence of the
            problem. It may or may not yield further information if
            dereferenced.
          example: http://example.com
    oAuthRevokeReq:
      allOf:
        - $ref: '#/components/schemas/oAuthBaseReq'
        - type: object
          required:
            - token
          description: oAuthRevoke request
          properties:
            token:
              description: The token to be revoked
              type: string
              example: hasdkajsdahkdhakdhja78234n2m342j34j23j4
    accountObject:
      type: object
      required:
        - name
        - languageId
        - timeZoneId
        - refAccountId
      properties:
        name:
          type: string
          description: Name of the account
          example: Marketo Integration account
        languageId:
          type: string
          description: Default language of the account
          example: en-US
        timeZoneId:
          type: string
          description: Default timezone of the account
          example: America/Los_Angeles
        refAccountId:
          type: string
          description: marketo account id
          example: jjd8
    link:
      type: object
      required:
        - href
      properties:
        href:
          type: string
          description: Its value is either a URI [RFC3986] or a URI Template [RFC6570].
        templated:
          type: boolean
          description: true when the  "href" property is a URI Template, false otherwise
    accountGetResp:
      allOf:
        - $ref: '#/components/schemas/accountObject'
        - type: object
          description: account  get response
          required:
            - id
            - _links
          properties:
            id:
              type: string
              description: Id of the account
              example: hh8jdkd09kj
            _links:
              type: object
              properties:
                self:
                  type: object
                  $ref: '#/components/schemas/link'
                  description: url of the account object
                licenses:
                  type: object
                  $ref: '#/components/schemas/link'
                  description: url of the account licenses
    accountCreateResp:
      type: object
      required:
        - id
        - adminAcessToken
      properties:
        id:
          type: string
          description: Id of the account created
          example: hh8jdkd09kj
        adminAcessToken:
          type: string
          description: Service Access token for admin access to the account
          example: hjdkd9993j3k3loanaals00md3i3m3o
        _embedded:
          type: object
          properties:
            account:
              description: newly created account object
              $ref: '#/components/schemas/accountGetResp'
        _links:
          type: object
          properties:
            account:
              type: object
              $ref: '#/components/schemas/link'
              description: href to get the newly created account
    patchDocument:
      description: A JSONPatch document as defined by RFC 6902
      required:
        - op
        - path
      properties:
        op:
          type: string
          description: The operation to be performed
          enum:
            - add
            - remove
            - replace
            - move
            - copy
            - test
        path:
          type: string
          description: A JSON-Pointer
        value:
          type: object
          description: The value to be used within the operations.
        from:
          type: string
          description: A string containing a JSON Pointer value.
    patchRequest:
      type: array
      items:
        $ref: '#/components/schemas/patchDocument'
    typeEnum:
      type: string
      title: License type enum
      description: License types (SRL, SEL, ASL)
      example: SRL
    baseLicenseObject:
      type: object
      required:
        - licenseType
        - startTime
        - endTime
        - state
        - freemium
      properties:
        licenseType:
          $ref: '#/components/schemas/typeEnum'
        capacity:
          type: integer
          description: capacity of the room
          example: 500
        sessions:
          type: integer
          description: Number of sessions per year with this license
          example: 10
        storage:
          type: number
          description: Storage allocated with this license in GB
          example: 20
        startTime:
          type: string
          format: date-time
          description: Start Date & time of the license in IS08601
          example: 20220712T054235Z
        endTime:
          type: string
          format: date-time
          description: End Date & time of the license in IS08601
          example: 20230712T054235Z
        freemium:
          type: boolean
          description: Is this license provisioned in the fremium model
          example: true
    stateEnum:
      type: string
      title: License type enum
      description: License types (ACTIVE, EXPIRED, INACTIVE)
      example: ACTIVE
    getLicenseObject:
      allOf:
        - $ref: '#/components/schemas/baseLicenseObject'
        - type: object
          description: license object
          required:
            - id
            - sessionsUsed
            - state
            - _links
          properties:
            id:
              type: string
              description: Id of the license
              example: jjjd9dj003j30
            sessionsUsed:
              type: integer
              description: number of sessions consumed or planned
              example: 2
            storageUsed:
              type: number
              description: amount of storage consumed in GB
              example: 5
            state:
              $ref: '#/components/schemas/stateEnum'
            _links:
              type: object
              properties:
                self:
                  type: object
                  $ref: '#/components/schemas/link'
                  description: url of the license
    accountLicenseGetResp:
      type: object
      description: account license get response
      properties:
        _links:
          type: object
          properties:
            self:
              type: object
              $ref: '#/components/schemas/link'
              description: url of the account licenses
        _embedded:
          type: object
          description: embeddded object
          properties:
            licenses:
              type: array
              items:
                $ref: '#/components/schemas/getLicenseObject'
    baseUserObject:
      type: object
      required:
        - email
        - firstName
        - lastName
      properties:
        email:
          type: string
          description: email of the user
          example: johndoe@example.com
        firstName:
          type: string
          description: first name of the user
          example: John
        lastName:
          type: string
          description: last name of the user
          example: Doe
        languageId:
          type: string
          description: Default language of the user
          example: en-US
        timeZoneId:
          type: string
          description: Default timezone of the user
          example: America/Los_Angeles
    getUserObject:
      allOf:
        - $ref: '#/components/schemas/baseUserObject'
        - type: object
          description: user object
          properties:
            id:
              type: string
              description: Id of the user
              example: jjdkd0nd0k
            _links:
              type: object
              properties:
                self:
                  type: object
                  $ref: '#/components/schemas/link'
                  description: url of the user resource
    baseEventObject:
      type: object
      required:
        - name
        - startTime
        - endTime
        - capacity
      properties:
        name:
          type: string
          description: name of the event
          example: Marketo sample event
        description:
          type: string
          description: first name of the user
          example: Marketo sample event
        startTime:
          type: string
          format: date-time
          description: Start time of the event in IS08601
          example: '2022-07-11T13:34:09+00:00'
        endTime:
          type: string
          format: date-time
          description: End time of the event in IS08601
          example: '2022-07-11T14:34:09+00:00'
        capacity:
          type: integer
          description: required capacity for the event
          example: 500
        languageId:
          type: string
          description: Default language of the user
          example: en-US
        timeZoneId:
          type: string
          description: Default timezone of the user
          example: America/Los_Angeles
    recordingObject:
      properties:
        name:
          type: string
          example: Recording 1
        url:
          type: string
          example: http://www.adobeconnect.com/recordings/recording1.mp4
    getEventObject:
      allOf:
        - $ref: '#/components/schemas/baseEventObject'
        - type: object
          description: event object
          properties:
            id:
              type: string
              description: Id of the event
            recording:
              type: array
              items:
                $ref: '#/components/schemas/recordingObject'
            url:
              type: string
              description: url to join the event
              example: http://www.adobeconnect.com/events/event1
            roomProvisioned:
              type: boolean
              description: Is the room setup
              example: false
            _links:
              type: object
              properties:
                self:
                  type: object
                  $ref: '#/components/schemas/link'
                  description: url of the event resource
                presenters:
                  type: object
                  $ref: '#/components/schemas/link'
                  description: url of the presenter resource
    getEventsResp:
      type: object
      description: Events get response
      properties:
        _links:
          type: object
          properties:
            self:
              type: object
              $ref: '#/components/schemas/link'
              description: url of the account licenses
        _embedded:
          type: object
          description: embeddded object
          properties:
            events:
              type: array
              items:
                $ref: '#/components/schemas/getEventObject'
    getPresenterObject:
      allOf:
        - $ref: '#/components/schemas/getUserObject'
        - type: object
          description: registration object
          properties:
            registrationId:
              type: string
              description: Registration id of the presenter
              example: bfg8ij
            url:
              type: string
              description: url to join the event
              example: http://www.adobeconnect.com/events/event1/join/78jejjdid
    getPresentersObject:
      type: object
      description: Get presenters response
      properties:
        _links:
          type: object
          properties:
            self:
              type: object
              $ref: '#/components/schemas/link'
              description: url to get the presenters for an event
        _embedded:
          type: object
          description: embeddded object
          properties:
            presenters:
              type: array
              items:
                $ref: '#/components/schemas/getPresenterObject'
    PingResponse:
      type: object
      required:
        - success
      properties:
        success:
          type: boolean
    BasicResponse:
      type: object
      required:
        - success
        - requestId
      properties:
        success:
          type: boolean
        requestId:
          type: string
          example: 1B123DD
    ErrorResponse:
      allOf:
        - $ref: '#/components/schemas/BasicResponse'
        - type: object
          required:
            - errors
          properties:
            errors:
              type: array
              items:
                type: object
                properties:
                  message:
                    type: string
                  code:
                    type: integer
    Session:
      type: object
      properties:
        duration:
          type: integer
          description: duration of the session in seconds
          example: 500
    PollAnswer:
      type: object
      properties:
        id:
          type: string
          description: id of the poll
          example: 82374982734
        responses:
          type: array
          items:
            type: string
            example: noida
    Qna:
      type: object
      properties:
        question:
          type: string
          description: text of the question
          example: what is the agenda?
        answers:
          type: array
          items:
            type: string
            example: noida
    Cta:
      type: object
      properties:
        link:
          type: string
          description: href of the link
          example: http://www.google.com/
    Download:
      type: object
      properties:
        file:
          type: string
          description: name of the file
          example: maruti_suzuki.pdf
    LeadResponse:
      type: object
      properties:
        id:
          type: integer
          format: int32
          example: 4
        firstName:
          type: string
          example: Jessica
        lastName:
          type: string
          example: Smith
        email:
          type: string
          example: jessica@marketo.com
        session:
          type: array
          items:
            $ref: '#/components/schemas/Session'
        polls:
          type: array
          items:
            $ref: '#/components/schemas/PollAnswer'
        qnas:
          type: array
          items:
            $ref: '#/components/schemas/Qna'
        ctas:
          type: array
          items:
            $ref: '#/components/schemas/Cta'
        downloads:
          type: array
          items:
            $ref: '#/components/schemas/Download'
    LeadsResponse:
      type: array
      items:
        $ref: '#/components/schemas/LeadResponse'
    Engagement:
      type: object
      properties:
        percent:
          type: number
          description: Engagement percentage
          example: 30.1
    Reaction:
      type: object
      properties:
        type:
          type: string
          description: Reaction type
          example: applause
        count:
          type: integer
          description: Number of participants reacted
          example: 2
    Summary:
      type: object
      properties:
        engagement:
          type: array
          items:
            $ref: '#/components/schemas/Engagement'
        reactions:
          type: array
          items:
            $ref: '#/components/schemas/Reaction'
    Poll:
      type: object
      properties:
        id:
          type: string
          description: id of the poll
          example: 82374982734
        question:
          type: string
          example: which city you are
    Meta:
      type: object
      properties:
        polls:
          type: array
          items:
            $ref: '#/components/schemas/Poll'
    AttendeesResponse:
      allOf:
        - $ref: '#/components/schemas/BasicResponse'
        - type: object
          required:
            - result
          properties:
            result:
              type: object
              required:
                - eventStatus
              properties:
                eventStatus:
                  type: string
                  enum:
                    - scheduled
                    - canceled
                    - running
                    - completed
                    - processing
                  example: completed
                leads:
                  $ref: '#/components/schemas/LeadsResponse'
                summary:
                  $ref: '#/components/schemas/Summary'
                meta:
                  $ref: '#/components/schemas/Meta'
    Lead:
      type: object
      properties:
        id:
          type: integer
          format: int32
          example: 4
        firstName:
          type: string
          example: Jessica
        lastName:
          type: string
          example: Smith
        email:
          type: string
          example: jessica@marketo.com
    RegistrationStatus:
      type: object
      properties:
        status:
          type: string
          enum:
            - registered
            - error
        registrationId:
          type: string
          example: B12X3
        webinarUrl:
          type: string
          example: http://webinar.edu/join/B123X
        errorMessage:
          type: string
          example: registered
      required:
        - status
    RegistrationResponse:
      allOf:
        - $ref: '#/components/schemas/BasicResponse'
        - type: object
          required:
            - result
          properties:
            result:
              $ref: '#/components/schemas/RegistrationStatus'
  responses:
    400Response:
      description: bad request
      content:
        application/problem+json:
          schema:
            $ref: '#/components/schemas/problemBase'
    401Response:
      description: forbidden
      content:
        application/problem+json:
          schema:
            $ref: '#/components/schemas/problemBase'
    404Response:
      description: not found
      content:
        application/problem+json:
          schema:
            $ref: '#/components/schemas/problemBase'
    UnauthorizedResponse:
      description: Unauthorized
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorResponse'
    ForbiddenResponse:
      description: Forbidden
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorResponse'
  parameters:
    requestId:
      in: query
      name: requestId
      description: String uniquely identifying this request.
      required: true
      schema:
        type: string
        example: b12z091
    eventId:
      in: path
      name: eventId
      required: true
      description: The id of the event in the partners system.
      schema:
        type: string
        minimum: 1
servers:
  # Added by API Auto Mocking Plugin
  - description: SwaggerHub API Auto Mocking
    url: https://virtserver.swaggerhub.com/VINODIAMONLINE_1/connect-rest-api-doc/1.0
  - url: https://nccqe.rtc.dev.adobeconnect.com/mock
    description: Mock server
